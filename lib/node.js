// Generated by CoffeeScript 1.3.1
var crypto, jar,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

crypto = require('crypto');

jar = require('./index');

jar.Jar = (function(_super) {

  __extends(Jar, _super);

  Jar.name = 'Jar';

  function Jar(request, response, keys) {
    this.request = request;
    this.response = response;
    this.keys = keys;
  }

  Jar.prototype._getCookies = function() {
    return this.request.headers['cookie'];
  };

  Jar.prototype._setCookie = function(cookie) {
    var headers;
    headers = this.response.getHeader('Set-Cookie') || [];
    if (typeof headers === 'string') {
      headers = [headers];
    }
    headers.push(cookie);
    return this.response.setHeader('Set-Cookie', headers);
  };

  Jar.prototype.sign = function(data, key) {
    if (key == null) {
      key = this.keys[0];
    }
    return crypto.createHmac('sha1', key).update(data).digest('hex');
  };

  Jar.prototype.verify = function(data, hash) {
    var i, key, _i, _len, _ref;
    _ref = this.keys;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      key = _ref[i];
      if (this.sign(data, key) === hash) {
        return true;
      }
    }
    return false;
  };

  Jar.prototype.get = function(name) {
    if (!this.cookies) {
      this.parse();
    }
    if (("" + name + ".sig") in this.cookies) {
      if (!this.verify(this.cookies[name], this.cookies["" + name + ".sig"])) {
        return;
      }
    }
    return Jar.__super__.get.call(this, name);
  };

  Jar.prototype.set = function(name, value, options) {
    var encoded;
    if (options == null) {
      options = {};
    }
    if (!this.cookies) {
      this.parse();
    }
    if (options.secure && !this.response.socket.encrypted) {
      throw new Error('Cannot send secure cookie over unencrypted socket.');
    }
    encoded = encodeURIComponent(JSON.stringify(value));
    this.cookies[name] = encoded;
    if (!('signed' in options) || options.signed) {
      if (!this.keys) {
        throw new Error('Cannot sign cookies without setting @keys.');
      }
      this.set("" + name + ".sig", this.sign(encoded));
    }
    return Jar.__super__.set.apply(this, arguments);
  };

  return Jar;

})(jar.Jar);
